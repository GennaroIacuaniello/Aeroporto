CREATE TABLE Admin (

	id_admin SERIAL PRIMARY KEY,
	username VARCHAR(20) NOT NULL,
	mail VARCHAR(50) NOT NULL,
	hashed_password CHAR(64) NOT NULL,
	is_deleted BOOLEAN NOT NULL DEFAULT false,

	CONSTRAINT correctness_of_username_minimal_length CHECK( LENGTH(username) >= 4 ),
	CONSTRAINT correct_mail_format CHECK( mail LIKE '%@%.%' AND mail NOT LIKE '%@%@%')
	--controllo ci sia una e una sola @ e almeno un punto

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Customer (

	id_customer SERIAL PRIMARY KEY,
	username VARCHAR(20) NOT NULL,
	mail VARCHAR(50) NOT NULL,
	hashed_password CHAR(64) NOT NULL,
	is_deleted BOOLEAN NOT NULL DEFAULT false,

	CONSTRAINT correctness_of_username_minimal_length CHECK( LENGTH(username) >= 4 ),
	CONSTRAINT correct_mail_format CHECK( mail LIKE '%@%.%' AND mail NOT LIKE '%@%@%')
	--controllo ci sia una e una sola @ e almeno un punto

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TYPE FlightStatus AS ENUM ('programmed', 'cancelled', 'aboutToDepart', 'departed', 'delayed', 'landed', 'aboutToArrive');

-------------------------------------------------------------------------------------------------------------------------

CREATE DOMAIN Minutes AS int;

-------------------------------------------------------------------------------------------------------------------------

CREATE DOMAIN FlightType AS boolean;	--true = departing, false = arriving

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Flight (

	id_flight VARCHAR(15) PRIMARY KEY,
	company_name VARCHAR(32) NOT NULL,
	flight_date DATE NOT NULL,
	departure_time TIME NOT NULL,
	arrival_time TIME NOT NULL,
	flight_status FlightStatus NOT NULL,
	max_seats SMALLINT NOT NULL,
	free_seats SMALLINT NOT NULL,
	destination_or_origin VARCHAR(64) NOT NULL,
	flight_delay Minutes NOT NULL,
	flight_type FlightType NOT NULL,
	id_gate SMALLINT,
	
	CONSTRAINT id_flight_not_empty CHECK(LENGTH(id_flight) > 0),
	CONSTRAINT comapny_name_not_empty CHECK(LENGTH(company_name) > 0),
	CONSTRAINT arrival_after_departure CHECK( arrival_time > departure_time),
	CONSTRAINT max_seats_positive CHECK(max_seats > 0),
	CONSTRAINT free_seats_not_negative CHECK(free_seats >= 0),
	CONSTRAINT max_free_seats CHECK(free_seats <= max_seats),
	CONSTRAINT destination_or_origin_not_empty CHECK(LENGTH(destination_or_origin) > 0),
	CONSTRAINT destination_or_origin_never_Napoli CHECK(destination_or_origin NOT LIKE 'Napoli'),
	--perché a priori, che sia departing o arriving, memorizziamo sempre l' "altra città", non Napoli
	CONSTRAINT flight_delay_not_negative CHECK(flight_delay >= 0),
	CONSTRAINT correctness_of_id_gate CHECK(id_gate IS NULL OR id_gate BETWEEN 0 AND 19) --l'aeroporto di Napoli ha 20 gate

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TYPE BookingStatus AS ENUM ('confirmed', 'pending', 'cancelled');

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Booking (

	id_booking SERIAL PRIMARY KEY,
	booking_status BookingStatus NOT NULL,
	booking_time TIME NOT NULL,
	buyer INTEGER NOT NULL,
	id_flight VARCHAR(15) NOT NULL,

	CONSTRAINT correctness_of_booking_time CHECK( booking_time <= CURRENT_TIME),
	CONSTRAINT buyer_FK FOREIGN KEY(buyer) REFERENCES Customer(id_customer) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT id_flight_FK FOREIGN KEY(id_flight) REFERENCES Flight(id_flight) ON DELETE CASCADE ON UPDATE CASCADE

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Passenger (

	
	first_name VARCHAR(30),
	last_name VARCHAR(30),
	birth_date DATE,
	SSN VARCHAR(16) PRIMARY KEY,

	CONSTRAINT first_name_not_empty CHECK(first_name IS NULL OR LENGTH(first_name) > 0),
	CONSTRAINT last_name_not_empty CHECK(last_name IS NULL OR LENGTH(last_name) > 0)

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Ticket (
	
	ticket_number CHAR(13) PRIMARY KEY,
	seat INTEGER,
	checked_in BOOLEAN NOT NULL DEFAULT false,
	id_booking INTEGER NOT NULL,
	id_passenger VARCHAR(16) NOT NULL,
	id_flight  VARCHAR(15) NOT NULL,

	CONSTRAINT booking_FK FOREIGN KEY(id_booking) REFERENCES Booking(id_booking) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT passenger_FK FOREIGN KEY(id_passenger) REFERENCES Passenger(SSN) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT id_flight_FK FOREIGN KEY(id_flight) REFERENCES Flight(id_flight) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT numeric_ticket_number CHECK( ticket_number ~ '^[0-9]+$' )

);

-------------------------------------------------------------------------------------------------------------------------

CREATE TYPE LuggageStatus AS ENUM ('booked', 'loaded', 'withdrawable', 'lost');

-------------------------------------------------------------------------------------------------------------------------

CREATE TYPE LuggageType AS ENUM ('carry_on', 'checked');

-------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Luggage (

	id_luggage SERIAL PRIMARY KEY,
	id_luggage_after_check_in VARCHAR(20) UNIQUE,
	luggage_type LuggageType,
	luggage_status LuggageStatus NOT NULL,
	id_ticket CHAR(13) NOT NULL,


	CONSTRAINT ticket_FK FOREIGN KEY(id_ticket) REFERENCES Ticket(ticket_number),
	CONSTRAINT correctness_of_id_luggage_after_check_in_minimal_length CHECK( id_luggage_after_check_in IS NULL OR LENGTH(id_luggage_after_check_in) > 13)
	--questa check serve per come è costruito id_luggage_after_check_in, 
	--ossia come concatenazione di ticket_number del passeggero associato + 'numero del bagaglio'
);

-------------------------------------------------------------------------------------------------------------------------



WHERE WAS I 966


